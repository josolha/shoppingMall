-- 관리자--
create table shop_admin(
    id varchar(20) not null,
    password varchar(20) not null,
    name varchar(20) not null,
    email varchar(50) not null
);
select * from shop_member;
drop table shop_admin;

insert into shop_admin values ('admin','1234','관리자','admin@gmail.com');
select * from shop_admin;
commit;

-- 카테고리--
create table category(
    cate_num int primary key auto_increment,
    code varchar(30) unique not null ,
    cate_name varchar(20) not null
);
select * from category;
drop table category;

-- 상품--
create table product(
    pNum int primary key auto_increment,
    pName varchar(50) not null,
    pCategory_fk varchar(30) not null ,
    FOREIGN KEY (pCategory_fk) REFERENCES category(code),
    pCompany varchar(50),
    pImage varchar(100),
    pQty int default 0,
    price int default 0,
    pSpec varchar(20),
    pContent varchar(300),
    pPoint int default 0,
    pInputDate date
);
select *from product;
drop table product;

UPDATE product SET pSpec='RECOMMEND' WHERE pSpec='recommend';


-- 회원--
create table shop_member(
    no int unique auto_increment,
    id varchar(50) primary key not null unique,
    pw varchar(100) not null,
    name varchar(50) not null,
    age int not null,
    email varchar(50) not null,
    phone varchar(50) not null,
    zipcode varchar(10),
    road_addr varchar(200),
    jibun_addr varchar(200),
    detail_addr varchar(200),
    unique key(id)
);

select * from shop_member;
drop table shop_member;

-- 게시판--
create table board(
    bid int auto_increment primary key,
    subject varchar(100) not null,
    contents varchar(3000) not null,
    hit int default 0,
    writer varchar(30) not null,
    regDate datetime default now() not null
);
select * from board;
drop table board;


-- 댓글--
create table reply(
   rno int auto_increment primary key,
   bid int,
   r_contents varchar(1000) not null,
   replyer varchar(20) not null,
   r_date datetime default now(),
   update_date datetime default now(),
    -- tbl_board의 bid를 외래키로 사용
    foreign key(bid) references board(bid)
);
drop table reply;
select * from reply;

-- 장바구니--
CREATE TABLE cart (
  user_id VARCHAR(50) NOT NULL,
  product_id INT NOT NULL,
  product_cnt INT DEFAULT 1,
  PRIMARY KEY (user_id, product_id),
  reg_date DATETIME DEFAULT NOW(),
  FOREIGN KEY (user_id) REFERENCES shop_member(id),
  FOREIGN KEY (product_id) REFERENCES product(pNum)
);
select * from cart;
drop table cart;


-- 주문 테이블--
CREATE TABLE orders (
  order_id  VARCHAR(50) PRIMARY KEY,
  member_id VARCHAR(50),
  order_date DATE NOT NULL,
  order_state VARCHAR(50) DEFAULT '주문 접수',
  total_amount int NOT NULL,
  receiver_name VARCHAR(50),
  receiver_phone VARCHAR(50),
  shipping_address VARCHAR(255) NOT NULL,
  FOREIGN KEY (member_id) REFERENCES shop_member(id)
);
drop table orders;
select * from orders;

-- 결제--
CREATE TABLE payments (
  payment_id VARCHAR(50) PRIMARY KEY,
  order_id VARCHAR(50) NOT NULL,
  payment_date DATETIME NOT NULL,
  used_points INT DEFAULT 0,
  earn_points INT DEFAULT 0,
  amount int NOT NULL,
  payment_status ENUM('PAID', 'PENDING', 'CANCELLED') NOT NULL,
  FOREIGN KEY (order_id) REFERENCES orders(order_id)
);
select * from payments;
drop table payments;

-- 주문 아이템--
CREATE TABLE order_items (
  order_items_id INT AUTO_INCREMENT PRIMARY KEY,
  order_id VARCHAR(50) NOT NULL,
  order_date datetime,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (product_id) REFERENCES product(pNum)
);
select * from order_items;
drop table order_items;

-- 포인트--
CREATE TABLE points (
  point_id INT AUTO_INCREMENT PRIMARY KEY,
  member_id VARCHAR(50) NOT NULL,
  payment_id VARCHAR(50),
  point_amount INT NOT NULL DEFAULT 0,
  point_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (member_id) REFERENCES shop_member(id),
   FOREIGN KEY (payment_id) REFERENCES payments(payment_id)
);
select *from points;
drop table points;

